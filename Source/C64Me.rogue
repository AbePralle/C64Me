#================================================================================
# C64Me.rogue
# April 26, 2021
#================================================================================

$requireRogue "1.8.1"

uses Utility/CommandLineParser
uses Bitmap

try
  C64Me( System.command_line_arguments )
catch (error:Error)
  local w = Console.width.or_smaller( 80 )
  Console.error.println "="*w
  Console.error.println "ERROR"
  Console.error.println error->String.word_wrapped(w-2).indented(2)
  Console.error.println "="*w
  System.exit 1
endTry

class C64Me
  METHODS
    method init( args:String[] )
      local command = CommandLineParser().
      [
        option( "--help",    &aliases=["-h","-?"] )
        option( "--output=", &alias="-o" )
        on_unknown( this=>print_usage )
      ].parse( args )

      if (command//options//help)
        print_usage
        return
      endIf

      if (command//args.is_empty)
        print_usage
      else
        local output = command//options//output->String
        if (output == "") output = null
        forEach (arg in command//args)
          convert( arg, output )
        endForEach
      endIf

    method print_usage
      println @|USAGE
               |  c64me filename.png/jpg [filename2 ...] [options]
               |
               |OPTIONS
               |  --help, -h, -?
               |    Display this help text.
               |
               |  --output=<filepath>, -o <filepath>
               |    Write the converted image or images to the specified file or folder.

    method convert( filepath:String, output_filepath=null:String )
      local bmp = Bitmap(File(filepath))
      println "$ [$x$]" (filepath,bmp.width,bmp.height)

      bmp = convert( bmp )

      contingent
        if (output_filepath)
          sufficient (not File.is_folder(output_filepath))
          output_filepath = File.join( output_filepath, File.filename(filepath) )
        else
          output_filepath = filepath
        endIf
        output_filepath .= before_first('.')
        local filename = File.filename( filepath )
        if (filename.to_lowercase == filename) output_filepath += "-c64.png"
        else                                   output_filepath += "-C64.png"
      endContingent

      println "  -> $" (output_filepath)
      File.save( output_filepath, bmp.to_png_bytes )

    method convert( bmp:Bitmap )->Bitmap
      local scale_x = 320.0 / bmp.size.x
      local scale_y = 200.0 / bmp.size.y
      local scale_to_fill = scale_x.or_larger( scale_y )
      bmp.resize( Int32(bmp.width*scale_to_fill), Int32(bmp.height*scale_to_fill) )
      bmp.crop( 320, 200, Anchor.CENTER )
      bmp.resize( 160, 200 )

      local c64_bmp = C64Bitmap( bmp )
      c64_bmp.convert_to_multicolor_bitmap

      local result = c64_bmp->Bitmap
      result.resize( 320, 200 )
      return result

endClass

enum C64Color( color:Color )
  # From: https://www.c64-wiki.com/wiki/Color
  BLACK       (Color(0xFF000000))
  WHITE       (Color(0xFFFFFFFF))
  RED         (Color(0xFF880000))
  CYAN        (Color(0xFFAAFFEE))
  VIOLET      (Color(0xFFCC44CC))
  GREEN       (Color(0xFF00CC55))
  BLUE        (Color(0xFF0000AA))
  YELLOW      (Color(0xFFEEEE77))
  ORANGE      (Color(0xFFDD8855))
  BROWN       (Color(0xFF664400))
  LIGHT_RED   (Color(0xFFFF7777))
  DARK_GREY   (Color(0xFF333333))
  GREY        (Color(0xFF777777))
  LIGHT_GREEN (Color(0xFFAAFF66))
  LIGHT_BLUE  (Color(0xFF0088FF))
  LIGHT_GREY  (Color(0xFFBBBBBB))

  GLOBAL PROPERTIES
    palette = C64Color[][ BLACK, WHITE, RED, CYAN, VIOLET, GREEN, BLUE, YELLOW, ORANGE, BROWN,
                          LIGHT_RED, DARK_GREY, GREY, LIGHT_GREEN, LIGHT_BLUE, LIGHT_GREY ]
endEnum

class RGB( red:Real64, green:Real64, blue:Real64 ) [compound]
  GLOBAL METHODS
    method create( color:Color )->RGB
      return RGB( color.red, color.green, color.blue )

  METHODS
    method best_match( wr=1:Real64, wg=1:Real64, wb=1:Real64, palette=C64Color.palette:C64Color[] )->C64Color
      local best : C64Color?
      local smallest_distance : Real64
      forEach (c64 in palette)
        local cur_distance = distance( c64, wr, wg, wb )
        if (not best or cur_distance < smallest_distance)
          best = c64
          smallest_distance = cur_distance
        endIf
      endForEach
      return best.value

    method description->String
      return "RGB($,$,$)" (red.format(".2"),green.format(".2"),blue.format(".2"))

    method distance( c64:C64Color, wr=1:Real64, wg=1:Real64, wb=1:Real64 )->Real64
      local c64_color = c64.color
      local r = wr * (red   - c64_color.red)
      local g = wg * (green - c64_color.green)
      local b = wb * (blue  - c64_color.blue)
      return r*r + g*g + b*b

    method operator+( other:RGB )->RGB
      return RGB( red+other.red, green+other.green, blue+other.blue )

    method operator-( other:RGB )->RGB
      return RGB( red-other.red, green-other.green, blue-other.blue )

    method operator*( value:Real64 )->RGB
      return RGB( red*value, green*value, blue*value )

    method to->C64Color( palette=null:C64Color[] )
      if (palette)
        return best_match( &=palette )
      else
        local y = best_match( 1.2, 1.2, 0.4 )  # best match emphasizing yellows
        local b = best_match( 1.2, 0.8, 1.2 )  # blues
        local g = best_match( 0.8, 0.4, 0.4 )  # greens

        if (b == C64Color.CYAN or b == C64Color.LIGHT_BLUE)   return b
        if (b == C64Color.BLUE or b == C64Color.VIOLET)       return b
        if (g == C64Color.GREEN or g == C64Color.LIGHT_GREEN) return g
        if (y == C64Color.VIOLET) return b
        if (y == C64Color.YELLOW)
          if (b == C64Color.YELLOW or b == C64Color.ORANGE) return y
          if (g == C64Color.YELLOW or g == C64Color.ORANGE) return y
          return b
        endIf
        return y
      endIf

    method to->String
      return description
endClass

class C64Bitmap
  PROPERTIES
    width, height : Int32
    pixels        : C64Color[]
    error         : RGB[]

  METHODS
    method init( bitmap:Bitmap )
      width = bitmap.width
      height = bitmap.height
      pixels = Dim<<C64Color>>( width * height )
      error  = Dim<<RGB>>( (width+2) * (height+1) )

      local src_data  = bitmap.pixels.data
      local src_i     = 0
      local src_w     = width
      local dest_data = pixels.data
      local err_data  = error.data
      local err_i     = 1
      local err_w     = width + 2
      loop height/2  # assumes even number of lines
        # Left to Right
        loop width
          local original = RGB( src_data[src_i] )
          local c64  = (original + err_data[err_i])->C64Color
          local diff = original - RGB(c64.color)
          err_data[ err_i+1 ]         = diff * (7.0/16.0)
          err_data[ err_i+(err_w-1) ] = diff * (3.0/16.0)
          err_data[ err_i+err_w ]     = diff * (5.0/16.0)
          err_data[ err_i+(err_w+1) ] = diff * (1.0/16.0)
          dest_data[ src_i ] = c64
          ++src_i
          ++err_i
        endLoop
        src_i += (src_w - 1)
        err_i += (err_w - 1)

        # Right to Left
        loop width
          local original = RGB( src_data[src_i] )
          local c64  = (original + err_data[err_i])->C64Color
          local diff = original - RGB(c64.color)
          err_data[ err_i-1 ]         = diff * (7.0/16.0)
          err_data[ err_i+(err_w+1) ] = diff * (3.0/16.0)
          err_data[ err_i+err_w ]     = diff * (5.0/16.0)
          err_data[ err_i+(err_w-1) ] = diff * (1.0/16.0)
          dest_data[ src_i ] = c64
          --src_i
          --err_i
        endLoop
        src_i += src_w + 1
        err_i += err_w + 1
      endLoop

    method convert_to_multicolor_bitmap
      local freq = Dim<<Int32>>(16)
      forEach (c in pixels) ++freq[c->Int32]
      local most_common       = 0
      local most_common_count = freq[0]
      forEach (count at index in freq)
        if (count > most_common_count)
          most_common = index
          most_common_count = count
        endIf
      endForEach
      local bg_color = most_common

      local palette = Dim<<C64Color>>(4)
      local src_data = pixels.data
      local freq_data = freq.data
      local remap = Dim<<Int32>>(16)
      forEach (y in 0..<height/8)
        forEach (x in 0..<width/4)

          # Count color frequency of current 4x8 tile
          freq[ forEach in 0..15 ] = 0
          local src_i = (y*8)*160+(x*4)
          loop 8
            local i = src_data[src_i]->Int32
            ++freq_data[ i ]
            i = src_data[src_i+1]->Int32
            ++freq_data[ i ]
            i = src_data[src_i+2]->Int32
            ++freq_data[ i ]
            i = src_data[src_i+3]->Int32
            ++freq_data[ i ]
            src_i += 160
          endLoop

          forEach (i in 0..15) remap[i] = i

          # BG color is the same for every tile so zero out that count
          freq[ bg_color ] = 0
          remap[ bg_color ] = bg_color

          # Get 3 other most common colors per tile
          local a = remove_highest( freq )
          local b = remove_highest( freq )
          local c = remove_highest( freq )
          remap[ a ] = a
          remap[ b ] = b
          remap[ c ] = c

          # For each other color used, precalculate the mapping to one of the used colors
          palette.clear
          palette.[ add bg_color, add a, add b, add c ]
          forEach (n at i in freq)
            if (n) remap[i] = RGB(C64Color(i).color)->C64Color( palette )->Int32
          endForEach

          # Remap the pixels
          local remap_data = remap.data
          src_i = (y*8)*160+(x*4)
          loop 8
            local c64 = src_data[src_i]->Int32
            src_data[src_i] = remap[c64]
            c64 = src_data[src_i+1]->Int32
            src_data[src_i+1] = remap[c64]
            c64 = src_data[src_i+2]->Int32
            src_data[src_i+2] = remap[c64]
            c64 = src_data[src_i+3]->Int32
            src_data[src_i+3] = remap[c64]
            src_i += 160
          endLoop

        endForEach
      endForEach

    method remove_highest( freq:Int32[] )->Int32
      local freq_data = freq.data
      local highest_index = 0
      local highest_count = freq_data[0]
      forEach (index in 1..15)
        local n = freq_data[index]
        if (n > highest_count)
          highest_count = n
          highest_index = index
        endIf
      endForEach
      freq_data[highest_index] = 0
      return highest_index

    method to->Bitmap
      local result = Bitmap( width, height )
      local dest = result.pixels.data
      forEach (c64 at i in pixels)
        dest[i] = c64.color
      endForEach
      return result
endClass

